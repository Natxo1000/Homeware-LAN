name: Build master frontend
on:
  release:
    types: [published]

env:
  working-directory: ./front

jobs:
  build:
    name: Build frontend
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x]
    steps:
    - uses: actions/checkout@v1
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: Install Packages
      run: npm install
      working-directory: ${{env.working-directory}}
    - name: Build React JS
      run: npm run build
      working-directory: ${{env.working-directory}}
    - name: Prepare the release content
      run: |
        mkdir Homeware-LAN
        cp -r ./back ./Homeware-LAN
        cp -r ./bash ./Homeware-LAN
        cp -r ./configuration_templates ./Homeware-LAN
        cp -r ./front ./Homeware-LAN
        cp  ./LICENSE ./Homeware-LAN
        cp  ./README.md ./Homeware-LAN
    - name: Zip the release
      uses: thedoctor0/zip-release@master
      with:
        filename: 'build.zip'
        path: './Homeware-LAN'
        exclusions: '*.git* /*node_modules/*'
    - name: Get latest release tag
      uses: octokit/request-action@v2.x
      id: get_latest_release
      with:
          route: GET /repos/:repository/releases/latest
          repository: ${{ github.repository }}
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Get upload url
      id: get_upload_url
      run: |
        url=$(echo "$response" | jq -r '.upload_url')
        echo "::set-output name=url::$url"
      env: 
        response:  ${{ steps.get_latest_release.outputs.data }}
    - name: Upload a Release Asset
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url:  ${{steps.get_upload_url.outputs.url}}
        asset_path: ./build.zip
        asset_name: build.zip
        asset_content_type: application/zip